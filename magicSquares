let matrix = [
    [2, 7, 6],
    [9, 5, 1],
    [4, 3, 8]
];

const isMagicSquare = (matrix) => {
    if (!matrix.every(Array.isArray)) {
        return false;
    }

    const n = matrix.length;
    const max = n * n;
    const duplicates = new Set();

    if (!matrix.every(row => row.length === n)) {
        return false;
    }

    function checkAndAddInteger(integer, max, duplicates) {
        if (integer < 1 || integer > max || duplicates.has(integer)) {
            return false;
        } 
        duplicates.add(integer);
        return true;
    }

    for (let i  = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
        let integer = matrix[i][j];

        if (!checkAndAddInteger(integer, max, duplicates)) {
            return false;
        }
    }
}
    

    const isMagicSquareFinal = (matrix) => {
        let n = matrix.length;

        let diagonalSumOne = matrix.reduce((sum, row, index) => sum + row[index], 0);

        let diagonalSumTwo = matrix.reduce((sum, row, index) => sum + row[n - 1 - index], 0);

        if (diagonalSumOne !== diagonalSumTwo) {
            return false;
        }

    for (let i = 0; i < n; i++) {
        let rowSum = matrix[i].reduce((sum, num) => sum + num, 0);

        let columnSum = matrix.reduce((sum, row) => sum + row[i], 0);

        if (rowSum !== columnSum || rowSum !== diagonalSumOne) {
            return false;
        }
    }
    return true;
};

return isMagicSquareFinal(matrix);
};



// test cases

// 4 x 4, should be true
let passingMatrix = [
    [1, 14, 15, 4],
    [12, 7, 6, 9],
    [8, 11, 10, 5],
    [13, 2, 3, 16]
];

// uneven dimensions (3x4), should be false
let failingRowsAndColumnsMatrix = [
    [1, 14, 15, 4],
    [12, 7, 6, 9],
    [8, 11, 10, 5]
];

// different number of columns, should be false
let failingRowsAndColumnsTwoMatrix = [
    [1, 14, 15, 4],
    [12, 7, 6]
];

// 5x5 but changed 25 to 26, should be false
let failingBigIntegersMatrix = [
    [11, 24, 7, 20, 3],
    [4, 12, 26, 8, 16],
    [17, 5, 13, 21, 9],
    [10, 18, 1, 14, 22],
    [23, 6, 19, 2, 15]
];

// 5x5 but changed 2 to -2, should be false
let failingSmallIntegersTwoMatrix = [
    [11, 24, 7, 20, 3],
    [4, 12, 26, 8, 16],
    [17, 5, 13, 21, 9],
    [10, 18, 1, 14, 22],
    [23, 6, 19, -2, 15]
];

// 5x5 but changed 8 to 7, should be false
let duplicateIntegersMatrix = [
    [11, 24, 7, 20, 3],
    [4, 12, 26, 7, 16],
    [17, 5, 13, 21, 9],
    [10, 18, 1, 14, 22],
    [23, 6, 19, 2, 15]
];

// 4x4 but swapped the 6 and 7, should be false
let notEqualDiagonalsMatrix = [
    [1, 14, 15, 4],
    [12, 6, 7, 9],
    [8, 11, 10, 5],
    [13, 2, 3, 16]
];

// 4x4 but swapped the 14 and 15, should be false
let notEqualSumRowsAndColumnsMatrix = [
    [1, 15, 14, 4],
    [12, 7, 6, 9],
    [8, 11, 10, 5],
    [13, 2, 3, 16]
];
